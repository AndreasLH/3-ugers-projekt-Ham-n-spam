# -*- coding: utf-8 -*- | Fri Jan 17 09:37:15 2020 | Andreas Lau Hansen
import numpy as np
import matplotlib.pyplot as plt

# =============================================================================
# x = np.array([   3,   67,  131,  195,  259,  323,  387,  451,  515,  579,  643,
#         707,  771,  835,  899,  963, 1027, 1091, 1155, 1219, 1283, 1347,
#        1411, 1475, 1539, 1603, 1667, 1731, 1795, 1859, 1923, 1987, 2051,
#        2115, 2179, 2243, 2307, 2371, 2435, 2500])
# =============================================================================
n_samples = 40
train_size_vect = np.linspace(3, 2500, n_samples, dtype = 'int32')
model_param = train_size_vect

output1 = np.array([0.7656    , 0.826     , 0.85306667, 0.8685    , 0.8764    ,
       0.8832    , 0.88874286, 0.8929    , 0.89653333, 0.9       ,
       0.90338182, 0.90596667, 0.90793846, 0.90937143, 0.91093333,
       0.912525  , 0.91381176, 0.91522222, 0.91677895, 0.91804   ,
       0.91908571, 0.92001818, 0.92106087, 0.92206667, 0.92312   ,
       0.92412308, 0.92518519, 0.92618571, 0.92711724, 0.92809333,
       0.92904516, 0.929875  , 0.93061818, 0.93136471, 0.93201143,
       0.93266667, 0.9332973 , 0.93393684, 0.93455385, 0.93528   ])
confint1 = np.array([0.01660317, 0.01486673, 0.01388925, 0.01326201, 0.01291826,
       0.01260882, 0.01234661, 0.0121437 , 0.01196174, 0.0117839 ,
       0.01160627, 0.01146761, 0.0113601 , 0.01128099, 0.01119381,
       0.01110392, 0.01103045, 0.01094909, 0.01085826, 0.01078387,
       0.01072162, 0.01066568, 0.01060262, 0.01054128, 0.0104765 ,
       0.01041429, 0.01034785, 0.01028471, 0.01022544, 0.01016283,
       0.01010126, 0.01004716, 0.00999837, 0.00994904, 0.00990603,
       0.0098622 , 0.00981977, 0.00977648, 0.00973448, 0.00968474])
output2 = np.array([0.8612    , 0.8908    , 0.912     , 0.9235    , 0.93072   ,
       0.9366    , 0.94142857, 0.9453    , 0.94871111, 0.95176   ,
       0.95429091, 0.9566    , 0.95849231, 0.96022857, 0.96184   ,
       0.96325   , 0.96451765, 0.96553333, 0.96644211, 0.96734   ,
       0.96811429, 0.96885455, 0.96958261, 0.9703    , 0.97088   ,
       0.97143077, 0.97194074, 0.97242857, 0.97286897, 0.97329333,
       0.97367742, 0.9740375 , 0.9744    , 0.97474118, 0.97504   ,
       0.97533333, 0.97564324, 0.97594737, 0.97622564, 0.9765    ])
confint2 = np.array([0.01356566, 0.01224689, 0.01113368, 0.010453  , 0.00999166,
       0.00959344, 0.00924936, 0.00896106, 0.00869695, 0.00845213,
       0.00824206, 0.00804456, 0.00787825, 0.00772188, 0.00757331,
       0.00744045, 0.00731859, 0.00721922, 0.00712895, 0.00703844,
       0.00695931, 0.00688268, 0.00680635, 0.00673018, 0.00666787,
       0.00660808, 0.00655218, 0.00649819, 0.00644902, 0.00640124,
       0.00635764, 0.00631646, 0.00627471, 0.00623512, 0.00620022,
       0.00616574, 0.00612908, 0.00609287, 0.00605953, 0.00602645])
output3 = np.array([0.7612    , 0.8224    , 0.85253333, 0.8726    , 0.8864    ,
       0.89673333, 0.90491429, 0.91115   , 0.91653333, 0.92084   ,
       0.92458182, 0.92766667, 0.93049231, 0.933     , 0.93493333,
       0.9366    , 0.93807059, 0.93911111, 0.94023158, 0.94134   ,
       0.94238095, 0.94336364, 0.94424348, 0.94528333, 0.946288  ,
       0.94723077, 0.94817778, 0.94904286, 0.94987586, 0.95070667,
       0.95150968, 0.9523    , 0.9530303 , 0.95369412, 0.95429714,
       0.95488889, 0.95547027, 0.95608421, 0.95665641, 0.95723   ])
confint3 = np.array([0.01670958, 0.01498631, 0.01390995, 0.01308565, 0.01245858,
       0.01195159, 0.01152437, 0.01118163, 0.01087267, 0.01061602,
       0.01038567, 0.01019026, 0.01000666, 0.0098398 , 0.00970853,
       0.00959344, 0.00949037, 0.00941654, 0.00933619, 0.00925582,
       0.00917951, 0.00910671, 0.0090409 , 0.00896233, 0.00888558,
       0.00881279, 0.00873891, 0.00867073, 0.00860444, 0.00853769,
       0.00847256, 0.00840785, 0.0083475 , 0.00829218, 0.00824154,
       0.00819147, 0.00814191, 0.00808918, 0.00803966, 0.00798965])
output4 = np.array([0.7612    , 0.7584    , 0.75853333, 0.7598    , 0.7636    ,
       0.7674    , 0.7732    , 0.7795    , 0.78431111, 0.78892   ,
       0.79210909, 0.7956    , 0.79713846, 0.79862857, 0.8008    ,
       0.802925  , 0.80472941, 0.80635556, 0.80816842, 0.8103    ,
       0.81207619, 0.81381818, 0.81535652, 0.81681667, 0.818336  ,
       0.81987692, 0.82133333, 0.82284286, 0.82452414, 0.82656   ,
       0.82843871, 0.8302375 , 0.83229091, 0.8342    , 0.83609143,
       0.83805556, 0.83979459, 0.84154737, 0.84321026, 0.8449    ])
confint4 = np.array([0.01670958, 0.01677602, 0.01677288, 0.01674292, 0.01665184,
       0.01655893, 0.0164135 , 0.01625048, 0.01612234, 0.01599654,
       0.01590772, 0.0158088 , 0.01576463, 0.01572151, 0.01565808,
       0.0155953 , 0.01554145, 0.01549248, 0.0154374 , 0.01537196,
       0.01531687, 0.01526235, 0.01521378, 0.01516731, 0.01511859,
       0.01506877, 0.0150213 , 0.01497172, 0.01491603, 0.01484793,
       0.01478442, 0.01472301, 0.01465219, 0.01458563, 0.01451902,
       0.01444912, 0.0143866 , 0.01432298, 0.01426207, 0.01419959])


plt.figure()
#1
plt.fill_between(model_param, output1-confint1, output1+confint1,
                 color = 'gray',alpha = 0.2)
plt.plot(model_param, output1, 'k', label = 'GaussNB(TF-IDF)')
#2
plt.fill_between(model_param, output2-confint2,output2+confint2,
                 color = 'gray',alpha = 0.2)
plt.plot(model_param, output2, 'b', label = 'MultinomialNB(BOW)')
#3
plt.fill_between(model_param, output3-confint3,output3+confint3,
                 color = 'gray',alpha = 0.2)
plt.plot(model_param, output3, 'r', label = 'KNN(TF-IDF)')
#4
plt.fill_between(model_param, output4-confint4,output4+confint4,
                 color = 'gray',alpha = 0.2)
plt.plot(model_param, output4, 'g', label = 'KNN(BOW)')



#use latex font for graph
plt.rc('text', usetex=True)
plt.title('Accuracy as a function of train size')
plt.xlabel('Train size')
plt.ylabel('Accuracy \%')
#plt.text(1100, 0.72, f'95\% CI with a test size of {SD_test_size}')
plt.ylim(0.7, 1)
plt.xlim(-2, 2500)
plt.grid(linestyle=':')
plt.legend(loc='lower right')
plt.savefig('samlet plot', dpi = 600)
plt.show()
